#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Nov  8 08:13:33 2023

@author: mkazemi
"""


## parse html file 


from bs4 import BeautifulSoup
import re

# Read the HTML file
# with open("/Users/mkazemi/cloudstor/2023/VicMap Project/State_Level Test/VicmapHydro/View Metadata.html") as fp:
#     soup = BeautifulSoup(fp, "html.parser")



# Opening the html file 
HTMLFile = open("/Users/mkazemi/cloudstor/2023/VicMap Project/State_Level Test/VicmapHydro/View Metadata.html", "r") 

# Reading the file 
index = HTMLFile.read() 

# Creating a BeautifulSoup object and specifying the parser 
Parse = BeautifulSoup(index, 'lxml') 

# Printing html code of some tags 
print(Parse.head) 
print(Parse.h1) 
print(Parse.h2) 
print(Parse.h3) 
print(Parse.div.table.tbody) 


parse_metadata_html = Parse.div.table.find('tbody', attrs={'class':''}).text

#Resource Name
Resource_Name =  r"Resource Name:\s*([\s\S]*?)(?=Title:)"
match = re.search(Resource_Name, parse_metadata_html)
Resource_Name_value = match.group(1)


#Title
Title =  r"Title:\s*([\s\S]*?)(?=Anzlic ID:)"
match = re.search(Title, parse_metadata_html)
Title_value = match.group(1)

#Anzlic ID
Anzlic_ID =  r"Anzlic ID:\s*([\s\S]*?)(?=Custodian:)"
match = re.search(Anzlic_ID, parse_metadata_html)
Anzlic_ID_value = match.group(1)

#Custodian
Custodian =  r"Custodian:\s*([\s\S]*?)(?=Owner:)"
match = re.search(Custodian, parse_metadata_html)
Custodian_value = match.group(1)

#Owner
Owner =  r"Owner:\s*([\s\S]*?)(?=Jurisdiction:)"
match = re.search(Owner, parse_metadata_html)
Owner_value = match.group(1)

#Jurisdiction
Jurisdiction =  r"Jurisdiction:\s*([\s\S]*?)(?=Abstract:)"
match = re.search(Jurisdiction, parse_metadata_html)
Jurisdiction_value = match.group(1)

#Abstract
Abstract =  r"Abstract:\s*([\s\S]*?)(?=Search Words:)"
match = re.search(Abstract, parse_metadata_html)
Abstract_value = match.group(1)

#Search Words
Search_Words =  r"Search Words:\s*([\s\S]*?)(?=Purpose:)"
match = re.search(Search_Words, parse_metadata_html)
Search_Words_values = match.group(1)

#Purpose
Purpose =  r"Purpose:\s*([\s\S]*?)(?=Geographic Extent Polygon:)"
match = re.search(Purpose, parse_metadata_html)
Purpose_value = match.group(1)

#Geographic Bounding Box
Geographic_Bounding_Box =  r"Geographic Bounding Box:\s*([\s\S]*?)(?=Beginning to Ending Date:)"
match = re.search(Geographic_Bounding_Box, parse_metadata_html)
Geographic_Bounding_Box_value = match.group(1)

#Beginning to Ending Date
Beginning_to_Ending_Date =  r"Beginning to Ending Date:\s*([\s\S]*?)(?=Maintainence and Update Frequency:)"
match = re.search(Beginning_to_Ending_Date, parse_metadata_html)
Beginning_to_Ending_Date_value = match.group(1)


#Maintainence and Update Frequency
Maintainence_and_Update_Frequency =  r"aintainence and Update Frequency:\s*([\s\S]*?)(?=Stored Data Format:)"
match = re.search(Maintainence_and_Update_Frequency, parse_metadata_html)
Maintainence_and_Update_Frequency_value = match.group(1)


#Stored Data Format
Stored_Data_Format =  r"Stored Data Format:\s*([\s\S]*?)(?=Available Format(s) Types:)"
match = re.search(Stored_Data_Format, parse_metadata_html)
Stored_Data_Format_value = match.group(1)

#Available Format(s) Types
Available_Format_Types =  r"Available Format(s) Types:\s*([\s\S]*?)(?=Positional Accuracy:)"
match = re.search(Available_Format_Types, parse_metadata_html)
Available_Format_Types_values = match.group(1)

#Positional Accuracy
Positional_Accuracy =  r"Positional Accuracy:\s*([\s\S]*?)(?=Attribute Accuracy:)"
match = re.search(Positional_Accuracy, parse_metadata_html)
Positional_Accuracy_value = match.group(1)

#Attribute Accuracy
Attribute_Accuracy =  r"Attribute Accuracy:\s*([\s\S]*?)(?=Logical Consistency:)"
match = re.search(Attribute_Accuracy, parse_metadata_html)
Attribute_Accuracy_value = match.group(1)

#Logical Consistency
Logical_Consistency =  r"Logical Consistency:\s*([\s\S]*?)(?=Data Source:)"
match = re.search(Logical_Consistency, parse_metadata_html)
Logical_Consistency_value = match.group(1)

#Data Source
Data_Source =  r"Data Source:\s*([\s\S]*?)(?=Contact Organisation:)"
match = re.search(Data_Source, parse_metadata_html)
Data_Source_value = match.group(1)


#Contact Organisation
Contact_Organisation =  r"Contact Organisation:\s*([\s\S]*?)(?=Contact Position:)"
match = re.search(Contact_Organisation, parse_metadata_html)
Contact_Organisation_value = match.group(1)


#Contact Position:
Contact_Position =  r"Contact Position:\s*([\s\S]*?)(?=Address:)"
match = re.search(Contact_Position, parse_metadata_html)
Contact_Position_value = match.group(1)



#Address
Address =  r"Address:\s*([\s\S]*?)(?=Telephone:)"
match = re.search(Address, parse_metadata_html)
Address_value = match.group(1)

#Telephone
Telephone =  r"Telephone:\s*([\s\S]*?)(?=Facsimile:)"
match = re.search(Telephone, parse_metadata_html)
Telephone_value = match.group(1)


#Facsimile
Facsimile =  r"Facsimile:\s*([\s\S]*?)(?=Email Address:)"
match = re.search(Facsimile, parse_metadata_html)
Facsimile_value = match.group(1)



#Email Address
Email_Address =  r"Email Address:\s*([\s\S]*?)(?=Metadata Date:)"
match = re.search(Email_Address, parse_metadata_html)
Email_Address_value = match.group(1)



#Metadata Date
Metadata_Date =  r"Metadata Date:\s*([\s\S]*?)(?=Additional Metadata:)"
match = re.search(Metadata_Date, parse_metadata_html)
Metadata_Date_value = match.group(1)



#Additional Metadata
Additional_Metadata =  r"Additional Metadata:\s*([\s\S]*?)"
match = re.search(Additional_Metadata, parse_metadata_html)
Additional_Metadata_value = match.group(1)
